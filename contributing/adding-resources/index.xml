<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Adding A Resource on Farmer</title><link>https://compositionalit.github.io/farmer/contributing/adding-resources/</link><description>Recent content in Adding A Resource on Farmer</description><generator>Hugo -- gohugo.io</generator><language>en-gb</language><lastBuildDate>Mon, 15 Jun 2020 03:57:42 +0200</lastBuildDate><atom:link href="https://compositionalit.github.io/farmer/contributing/adding-resources/index.xml" rel="self" type="application/rss+xml"/><item><title>1. The Farmer Pipeline</title><link>https://compositionalit.github.io/farmer/contributing/adding-resources/1-the-farmer-pipline/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://compositionalit.github.io/farmer/contributing/adding-resources/1-the-farmer-pipline/</guid><description>This step will get you up and running by incorporate something quickly and easily into the Farmer pipeline that emits a valid Azure Container Registry.
Step 1.1: Prototype and test using an fsx file Technically this step is not necessary but it is the quickest way to get a working deployment from which you can iterate upon.
Start by looking at this sample and identifying the section of JSON that relates to the resource we want - in our case, the Microsoft.</description></item><item><title>2. The IArmResource</title><link>https://compositionalit.github.io/farmer/contributing/adding-resources/2-iarm-resource/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://compositionalit.github.io/farmer/contributing/adding-resources/2-iarm-resource/</guid><description>In this exercise, we&amp;rsquo;ll migrate our code from the previous step directly into the Farmer codebase.
Step 2.1: Migrating to IArmResource Now that you know that your resource model produces the correct Json value when passed into Farmer, we can now create a formal IArmResource statically that contains the &amp;ldquo;parameterised&amp;rdquo; parts of the above function, such as name, sku and adminUserEnabled and properly take part in the Farmer pipeline. This record should use types as required to capture e.</description></item><item><title>3. The IBuilder interface</title><link>https://compositionalit.github.io/farmer/contributing/adding-resources/3-ibuilder/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://compositionalit.github.io/farmer/contributing/adding-resources/3-ibuilder/</guid><description>Sometimes, ARM resources are captured at a level of abstraction that is too low for us to reason about. In such cases, we
An IBuilder is not only even easier to consume by users than the F# record above, but can create multiple IArmResource objects at once. This is especially useful for more complex resources that tend to come in groups of two or three together - for example, Server Farm and Web Apps, or Cosmos DB Accounts, Databases and Containers.</description></item><item><title>4. Providing Builder syntax</title><link>https://compositionalit.github.io/farmer/contributing/adding-resources/4-creating-builder-syntax/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://compositionalit.github.io/farmer/contributing/adding-resources/4-creating-builder-syntax/</guid><description>If you want to get the nice json-like syntax for your configuration record, you need to implement a separate class which contains a set of methods that act on the Configuration Record that you created previously - one for each keyword that you want.
If you need have not built your own computation expression before, here are some resources to brush up:
Office microsoft docs The &amp;ldquo;Computation Expressions&amp;rdquo; series Workshop Step 4.</description></item><item><title>5. Unit Testing</title><link>https://compositionalit.github.io/farmer/contributing/adding-resources/5-unit-testing/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://compositionalit.github.io/farmer/contributing/adding-resources/5-unit-testing/</guid><description>Usually I would be pro writing the tests before you implement all this but it is important to get a feel for the moving parts. At this point you may want to write some tests so you can iterate quickly on getting the structure of your ARM template correct.
The tests you will find in the project are black-box style tests that focus on the input of a resource and the output of the ARM template.</description></item></channel></rss>