<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Quickstarts on Farmer</title><link>https://compositionalit.github.io/farmer/quickstarts/</link><description>Recent content in Quickstarts on Farmer</description><generator>Hugo -- gohugo.io</generator><language>en-gb</language><lastBuildDate>Tue, 04 Feb 2020 00:41:03 +0100</lastBuildDate><atom:link href="https://compositionalit.github.io/farmer/quickstarts/index.xml" rel="self" type="application/rss+xml"/><item><title>Your first Farmer template</title><link>https://compositionalit.github.io/farmer/quickstarts/quickstart-1/</link><pubDate>Tue, 04 Feb 2020 00:41:51 +0100</pubDate><guid>https://compositionalit.github.io/farmer/quickstarts/quickstart-1/</guid><description>Introduction In this exercise, you&amp;rsquo;ll:
create a web application with a fully-configured Application Insights instance create an ARM deployment object and assign the web app to it generate an ARM template Creating a Farmer app Create an F# console application using the .NET SDK and add the Farmer package in an empty directory:
dotnet new console -lang F# dotnet add package Farmer Farmer also has a .NET template to get started even more quickly!</description></item><item><title>Working with multiple resources</title><link>https://compositionalit.github.io/farmer/quickstarts/quickstart-2/</link><pubDate>Tue, 04 Feb 2020 00:41:51 +0100</pubDate><guid>https://compositionalit.github.io/farmer/quickstarts/quickstart-2/</guid><description>Introduction In this quickstart, you&amp;rsquo;ll expand on the deployment authored in the previous quickstart as follows:
add an Azure storage account add an application setting to the web app that references the storage account&amp;rsquo;s key set a dependency between the two resources Creating a storage account Create a storage account by using the storageAccount builder.
let myStorage = storageAccount { name &amp;#34;yourfirststorage&amp;#34; } Azure Storage Account names must be globally unique and between 3-24 alphanumeric lower-case characters!</description></item><item><title>Deploying to Azure</title><link>https://compositionalit.github.io/farmer/quickstarts/quickstart-3/</link><pubDate>Tue, 04 Feb 2020 00:41:51 +0100</pubDate><guid>https://compositionalit.github.io/farmer/quickstarts/quickstart-3/</guid><description>Introduction In this exercise, you&amp;rsquo;ll update the application to deploy the generated ARM template to Azure directly from Farmer.
Farmer generates normal ARM templates. You use all of the standard mechanisms for deploying ARM templates such as through the portal, Powershell, .NET or Azure CLI etc. This tutorial shows you a simple way to deploy templates from your development machine directly from within F#.
Install the Azure CLI If you haven&amp;rsquo;t done so already, install the Azure CLI on your machine.</description></item><item><title>The Farmer .NET Template</title><link>https://compositionalit.github.io/farmer/quickstarts/template/</link><pubDate>Tue, 04 Feb 2020 00:41:51 +0100</pubDate><guid>https://compositionalit.github.io/farmer/quickstarts/template/</guid><description>Farmer comes with a .NET template that makes getting started easy.
Creating a basic Farmer app The easiest way to create a Farmer app is to use the Farmer .NET Template.
dotnet new -i Farmer.Template dotnet new Farmer You only have to install the template once on your machine!
This creates a new dotnet application solution and project that looks by default as follows:
open Farmer open Farmer.Builders let deployment = arm { location Location.</description></item></channel></rss>